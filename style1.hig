<expression>
%assoc = left
%nonterm = "type_name", "argumentExpressionList",
           "expression", "initializerList"

postfixExpression
  : x "++" | x "--" | x "[" "expression" "]" | x "(" ")"
  | x "(" "argumentExpressionList" ")"
  | x "." x
  | x "->" x
  | "(" "type_name" ")" "{" "initializerList" "}"
  | "(" "type_name" ")" "{" "initializerList" "," "}"
  ;

unaryExpression(right)
  : "++" x | "--" x | "sizeof" "(" "type_name" ")" 
  | "sizeof" x | "&" x | "*" x | "+" x
  | "-" x | "~" x | "!" x
  ;

castExpression(right)
  : "(" "type_name" ")" x
  ;

multiplecativeExpression
  : x "*" x | x "/" x | x "%" x
  ;

additiveExpression
  : x "+" x | x "-" x
  ;

shiftExpression
  : x "<<" x | x ">>" x
  ;

relationalExpression
  : x "<" x | x ">" x | x "<=" x | x ">=" x
  ;

equalityExpression
  : x "==" x | x "=!" x
  ;

bitwiseAnd
  : x "&" x
  ;

bitwiseXor
  : x "^" x
  ;

bitwiseOr
  : x "|" x
  ;

boolAnd
  : x "&&" x
  ;

boolOr
  : x "||" x
  ;

conditionExpression(right)
  : x "?" x ":" x
  ;

assignExpression(right)
  : x "=" x | x "+=" x | x "-=" x
  | x "*=" x | x "/=" x | x "%=" x
  | x"<<=" x | x ">>=" x | x "&=" x
  | x "^=" x | x "|=" x
  ;

commaExpression
  : x "," x
  ;