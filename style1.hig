<expression>
%assoc = left
%nonterm = 'type_name', 'argumentExpressionList',
           'expression', 'initializerList'

postfixExpression
  : _ '++' | _ '--' | _ '[' 'expression' ']' | _ '(' ')'
  | _ '(' 'argumentExpressionList' ')'
  | _ '.' _
  | _ '->' _
  | '(' 'type_name' ')' '{' 'initializerList' '}'
  | '(' 'type_name' ')' '{' 'initializerList' ',' '}'
  ;

unaryExpression(right)
  : '++' _ | '--' _ | 'sizeof' '(' 'type_name' ')' 
  | 'sizeof' _ | '&' _ | '*' _ | '+' _
  | '-' _ | '~' _ | '!' _
  ;

castExpression(right)
  : '(' 'type_name' ')' _
  ;

multiplecativeExpression
  : _ '*' _ | _ '/' _ | _ '%' _
  ;

additiveExpression
  : _ '+' _ | _ '-' _
  ;

shiftExpression
  : _ '<<' _ | _ '>>' _
  ;

relationalExpression
  : _ '<' _ | _ '>' _ | _ '<=' _ | _ '>=' _
  ;

equalityExpression
  : _ '==' _ | _ '=!' _
  ;

bitwiseAnd
  : _ '&' _
  ;

bitwiseXor
  : _ '^' _
  ;

bitwiseOr
  : _ '|' _
  ;

boolAnd
  : _ '&&' _
  ;

boolOr
  : _ '||' _
  ;

conditionExpression(right)
  : _ '?' _ ':' _
  ;

assignExpression(right)
  : _ '=' _ | _ '+=' _ | _ '-=' _
  | _ '*=' _ | _ '/=' _ | _ '%=' _
  | _'<<=' _ | _ '>>=' _ | _ '&=' _
  | _ '^=' _ | _ '|=' _
  ;

commaExpression
  : _ ',' _
  ;