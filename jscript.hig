<expression>
%assoc = left
%operator = 'expression'

memberExpression
  : _ '[' 'expression' ']'
  | _ '.' identifierName_TODO
  | template_TODO
  | superProperty_TODO 
  | metaProperty_TODO
  | newArguments_TODO
  ;

newExpression
  : 'new' _
  ;

leftHandSideExpression
  : callExpression_TODO
  | optionalExpression_TODO
  ;

updateExpression (nonassoc)
  : _ '++'
  | _ '--'
  | '++' unaryExpression
  | '--' unaryExpression
  ;

unaryExpression
  : 'delete' _ 
  | 'void' _
  | 'typeof' _
  | '+' _
  | '-' _
  | '~' _
  | '!' _
  | 'await' _
  ;

exponentiationExpression (right)
  : updateExpression '**' _
  ;

multiplicativeExpression
  : _ '*' _
  | _ '/' _
  | _ '%' _
  ;

additiveExpression
  : _ '+' _
  | _ '-' _
  ;

shiftExpression
  : _ '<<' _
  | _ '>>' _
  | _ '>>>' _
  ;

relationalExpression
  : _ '<' _
  | _ '>' _
  | _ '<=' _
  | _ '>=' _
  | _ 'instanceof' _
  | _ 'in' _
  ;

equalityExpression
  : _ '==' _
  | _ '=!' _
  | _ '===' _
  | _ '!==' _
  ;

bitwiseAndExpression
  : _ '&' _
  ;

bitwiseXorExpression
  : _ '^' _
  ;

bitwiseOrExpression
  : _ '|' _
  ;

logicalAndExpression
  : _ '&&' _
  ;

logicalOrExpression
  : _ '||' _
  ;

shortCircuitExpression
  : coalesceExpression_TODO
  ;

conditionalExpression (right)
  : _ '?' assignmentExpression ':' assignmentExpression
  ;

assignmentExpression (right)
  : yieldExpression_TODO
  | arrowFunction_TODO
  | asyncArrowFunction_TODO
  | leftHandSideExpression '=' _
  | leftHandSideExpression '*=' _
  | leftHandSideExpression '/=' _
  | leftHandSideExpression '%=' _
  | leftHandSideExpression '+=' _
  | leftHandSideExpression '-=' _
  | leftHandSideExpression '<<=' _
  | leftHandSideExpression '>>=' _
  | leftHandSideExpression '>>>=' _
  | leftHandSideExpression '&=' _
  | leftHandSideExpression '^=' _
  | leftHandSideExpression '|=' _
  | leftHandSideExpression '**=' _
  | leftHandSideExpression '||=' _
  | leftHandSideExpression '??=' _
  ;

commaExpression
  : _ ',' _
  ;