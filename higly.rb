#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require './higly_expression'

class OpClassRegistry
  def initialize(name, assoc, operators)
    @name = name
    @assoc = assoc
    @operators = operators
    @prename = nil
    @child = nil
  end

  attr_reader :assoc, :operators
  attr_accessor :name, :prename, :child
end

class OpRegistry
  def initialize(kind, operators, operand)
    @kind = kind
    @operators = operators
    @operand = operand
  end

  attr_reader :kind, :operators, :operand
end

class OpCode
  def initialize(name, prename, kind)
    @name = name
    @prename = prename
    @kind = kind
    @code = ""
  end

  attr_reader :name, :prename, :kind
  attr_accessor :code
end

class HiglyParser < Racc::Parser

module_eval(<<'...end higly_racc.y/module_eval...', 'higly_racc.y', 146)
attr_reader :opclasses, :operators, :acheck

def parse(f)
  @q = []
  @lineno = 1
  @termno = 1
  @operators = Hash.new
  @default_assoc = 0

  f.each do |line|
    line.strip!
    until line.empty?
      case line
      when /\A%expression/
        @q << [:EXP, $&]
      when /\Aleft/
        @q << [:LEFT, $&]
      when /\Aright/
        @q << [:RIGHT, $&]
      when /\Anonassoc/
        @q << [:NONASSOC, $&]
      when /\A-action/
        @q << [:ACHECK, $&]
      when /\A@/
        @q << [:OP, $&]
      when /\A(0|[1-9]\d*)\.\d+/
        @q << [:NUM, $&]
      when /\A(0|[1-9])\d*/
        @q << [:NUM, $&]
      when /\A"([[^"]&&\S]*)"/
        @q << [:S_LITERAL, $1]
      when /\A\(/
        @q << ['(', $&]
      when /\A\)/
        @q << [')', $&]
      when /\A\./
        @q << ['.', $&]
      when /\A;/
        @q << [';', $&]
      when /\A:/
        @q << [':', $&]
      when /\A\|/
        @q << ['|', $&]
      when /\A[a-zA-Z_]\w*/
        @q << [:IDENTIFIER, $&]
      when /\A./
      end
      line = $'
    end
    @q << [:EOL, '']
  end
  @q << [false, '$']
  do_parse
  puts "parse is successfull."
end

def next_token
  l = @q.shift
  while l[0] == :EOL do
    @lineno += 1
    l = @q.shift
  end
  return l
end

def on_error(t, v, values)
  raise Racc::ParseError, "line #{@lineno}: syntax error on #{v.inspect}."
end

def token_register(t)
  if t =~ /\A\w+/ then
    @operators[t] = t.upcase
  elsif t.size == 1 then
    @operators[t] = "\'#{t}\'"
  else
    @operators[t] = "OP#{@termno}"
    @termno += 1
  end
end

...end higly_racc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,    24,    15,    28,    29,    30,    23,     8,    13,    14,
    27,    33,    24,    24,    24,    24,    32,    23,    23,    23,
    23,    24,    17,    18,    19,     3,    23,    17,    18,    19,
    17,    18,    19,    43,    30,    52,    30,    54,    30,     4,
     9,    10,     8,     8,     8,    20,    26,    31,    34,    38,
    39,    41,    42,    44,    41,    46,    47,    50,    51 ]

racc_action_check = [
     2,    14,     8,    20,    21,    21,    14,     2,     8,     8,
    20,    24,    27,    30,    41,    42,    24,    27,    30,    41,
    42,    50,     9,     9,     9,     0,    50,    15,    15,    15,
    28,    28,    28,    35,    35,    49,    49,    53,    53,     1,
     3,     4,     5,     6,    12,    13,    16,    23,    25,    31,
    32,    33,    34,    36,    38,    39,    40,    44,    46 ]

racc_action_pointer = [
    22,    39,    -2,    36,    41,    33,    34,   nil,    -2,    16,
   nil,   nil,    35,    36,    -8,    21,    41,   nil,   nil,   nil,
    -1,    -8,   nil,    38,     2,    43,   nil,     3,    24,   nil,
     4,    40,    41,    42,    41,    21,    48,   nil,    45,    41,
    42,     5,     6,   nil,    46,   nil,    49,   nil,   nil,    23,
    12,   nil,   nil,    25,   nil ]

racc_action_default = [
   -23,   -23,   -23,   -23,   -23,    -1,   -23,    -8,   -23,   -23,
    55,    -7,    -2,   -23,   -23,   -23,   -23,    -4,    -5,    -6,
   -23,   -23,   -13,   -23,   -23,   -23,    -3,   -23,   -23,   -11,
   -23,   -15,   -17,   -21,   -23,   -23,   -23,   -14,   -21,   -19,
   -23,   -23,   -23,    -9,   -23,   -16,   -23,   -18,   -22,   -23,
   -23,   -20,   -12,   -23,   -10 ]

racc_goto_table = [
    21,    16,    11,    37,     5,    40,     1,    25,    12,    11,
    45,     2,   nil,    35,    48,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    53 ]

racc_goto_check = [
     6,     4,     5,     7,     3,     8,     1,     4,     3,     5,
     8,     2,   nil,     6,     7,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     6,    11,     2,    -8,    -3,   -14,   -27,   -28 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     7,   nil,    22,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 16, :_reduce_1,
  3, 16, :_reduce_2,
  4, 17, :_reduce_3,
  1, 19, :_reduce_4,
  1, 19, :_reduce_5,
  1, 19, :_reduce_6,
  2, 18, :_reduce_7,
  1, 18, :_reduce_8,
  6, 20, :_reduce_9,
  9, 20, :_reduce_10,
  4, 20, :_reduce_11,
  7, 20, :_reduce_12,
  1, 21, :_reduce_13,
  3, 21, :_reduce_14,
  2, 22, :_reduce_15,
  4, 22, :_reduce_16,
  2, 22, :_reduce_17,
  4, 22, :_reduce_18,
  3, 22, :_reduce_19,
  5, 22, :_reduce_20,
  0, 23, :_reduce_21,
  2, 23, :_reduce_22 ]

racc_reduce_n = 23

racc_shift_n = 55

racc_token_table = {
  false => 0,
  :error => 1,
  :ACHECK => 2,
  :EXP => 3,
  "(" => 4,
  ")" => 5,
  :NONASSOC => 6,
  :LEFT => 7,
  :RIGHT => 8,
  :IDENTIFIER => 9,
  "." => 10,
  ":" => 11,
  ";" => 12,
  "|" => 13,
  :S_LITERAL => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ACHECK",
  "EXP",
  "\"(\"",
  "\")\"",
  "NONASSOC",
  "LEFT",
  "RIGHT",
  "IDENTIFIER",
  "\".\"",
  "\":\"",
  "\";\"",
  "\"|\"",
  "S_LITERAL",
  "$start",
  "expression",
  "exp_head",
  "expstmts",
  "assoc",
  "expstmt",
  "expfig",
  "operators",
  "operands" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'higly_racc.y', 5)
  def _reduce_1(val, _values, result)
          val[1].last.prename = "primaryExpression"
      @opclasses = val[1]
      @acheck = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 11)
  def _reduce_2(val, _values, result)
          val[2].last.prename = "primaryExpression"
      @opclasses = val[2]
      @acheck = true
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 17)
  def _reduce_3(val, _values, result)
     @default_assoc = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 20)
  def _reduce_4(val, _values, result)
     result = :nonassoc 
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 21)
  def _reduce_5(val, _values, result)
     result = :left 
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 22)
  def _reduce_6(val, _values, result)
     result = :right 
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 27)
  def _reduce_7(val, _values, result)
          val[0].last.prename = val[1].name
      result = val[0].push(val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 32)
  def _reduce_8(val, _values, result)
          result = Array.new
      result.push(val[0])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 39)
  def _reduce_9(val, _values, result)
          result = OpClassRegistry.new(val[0], 0, nil)
      result.child = OpClassRegistry.new(val[2], @default_assoc, val[4])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 44)
  def _reduce_10(val, _values, result)
          result = OpClassRegistry.new(val[0], 0, nil)
      result.child = OpClassRegistry.new(val[2], val[4], val[7])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 49)
  def _reduce_11(val, _values, result)
          result = OpClassRegistry.new(val[0], @default_assoc, val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 53)
  def _reduce_12(val, _values, result)
          result = OpClassRegistry.new(val[0], val[2], val[5])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 59)
  def _reduce_13(val, _values, result)
          result = Array.new
      result.push(val[0])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 64)
  def _reduce_14(val, _values, result)
          result = val[0].push(val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 70)
  def _reduce_15(val, _values, result)
          token_register(val[0])
      result = OpRegistry.new(:left, [val[0]], 1)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 75)
  def _reduce_16(val, _values, result)
          token_register(val[0])
      result = OpRegistry.new(:left, [val[0]], 2+val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 80)
  def _reduce_17(val, _values, result)
          token_register(val[1])
      result = OpRegistry.new(:right, [val[1]], 1)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 85)
  def _reduce_18(val, _values, result)
          token_register(val[3])
      result = OpRegistry.new(:right, [val[3]], 2+val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 90)
  def _reduce_19(val, _values, result)
          token_register(val[1])
      result = OpRegistry.new(:binary, [val[1]], 1)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 95)
  def _reduce_20(val, _values, result)
          token_register(val[1])
      token_register(val[3])
      result = OpRegistry.new(:ternary, [val[1],val[3]], 1)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 101)
  def _reduce_21(val, _values, result)
    result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 102)
  def _reduce_22(val, _values, result)
    result = 1 + val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class HiglyParser


parser = HiglyParser.new
if ARGV[0] then
  File.open(ARGV[0]) do |f|
    parser.parse f
  end

  if ARGV[1] then
    f1 = File.open("#{ARGV[1]}.l", "w")
    f2 = File.open("#{ARGV[1]}.y", "w")
  else
    f1 = File.open("higly.l", "w")
    f2 = File.open("higly.y", "w")
  end

  
  exp = Expression.new(parser.operators, parser.opclasses, parser.acheck)

  lex = exp.make_lex()
  yacc = exp.make_yacc_definition()
  yacc += exp.make_yacc_rule()
  yacc += exp.make_yacc_footer()

  f1.puts(lex)
  f2.puts(yacc)
  f1.close
  f2.close
else
  puts "file is nothing. input code."
end
