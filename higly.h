#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


class HiglyParser < Racc::Parser

module_eval(<<'...end higly_racc.y/module_eval...', 'higly_racc.y', 56)
def parse(f)
  @q = []
  @lineno = 1
  @termno = 1
  @term = Hash.new

  f.each do |line|
    line.strip!
    until line.empty?
      case line
      when /\A%expression/
        @q << [:EXP, $&]
      when /\Aleft/
        @q << [:LEFT, $&]
      when /\Aright/
        @q << [:RIGHT, $&]
      when /\A@/
        @q << [:OP, $&]
      when /\A(0|[1-9]\d*)\.\d+/
        @q << [:NUM, $&]
      when /\A(0|[1-9])\d*/
        @q << [:NUM, $&]
      when /\A"([[^"]&&\S]*)"/
        @q << [:S_LITERAL, $1]
      when /\A\(/
        @q << ['(', $&]
      when /\A\)/
        @q << [')', $&]
      when /\A,/
        @q << [',', $&]
      when /\A;/
        @q << [';', $&]
      when /\A:/
        @q << [':', $&]
      when /\A\|/
        @q << ['|', $&]
      when /\A[a-zA-Z_]\w*/
        @q << [:IDENTIFIER, $&]
      when /\A./
      end
      line = $'
    end
    @q << [:EOL, '']
  end
  @q << [false, '$']
  do_parse
  puts "parse is successfull."
end

def next_token
  l = @q.shift
  while l[0] == :EOL do
    @lineno += 1
    l = @q.shift
  end
  return l
end

def on_error(t, v, values)
  raise Racc::ParseError, "line #{@lineno}: syntax error on #{v.inspect}. token is #{token_to_str(t)}. v is #{v}. values is #{values}."
end

def make_lex
  code = ""
  t = @term.sort_by {|_,v|
        v =~ /\d+/
        $&.to_i
      }.to_h
  t.each {|key, value|
    code += "\"#{key}\"  { return(#{value}); }\n"
  }
  return code
end

...end higly_racc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    15,    28,     7,     8,     2,    14,    27,    16,     7,     8,
     7,     8,   -15,    20,     3,     4,     5,     9,    12,    12,
    20,    22,    23,    24,    25,    26,    20,    20,    31,    20,
    20,    36,    37,    38,    39,    20,    41 ]

racc_action_check = [
    12,    22,     4,     4,     0,    12,    22,    12,    15,    15,
    28,    28,    30,    30,     1,     2,     3,     6,     9,    11,
    14,    16,    17,    18,    19,    21,    24,    25,    26,    27,
    31,    32,    33,    35,    37,    39,    40 ]

racc_action_pointer = [
     2,    14,    12,    16,    -3,   nil,    13,   nil,   nil,    11,
   nil,    12,    -3,   nil,     7,     3,    14,    13,    12,    12,
   nil,    21,    -2,   nil,    13,    14,    20,    16,     5,   nil,
     0,    17,    22,    28,   nil,    24,   nil,    26,   nil,    22,
    27,   nil ]

racc_action_default = [
   -16,   -16,   -16,   -16,   -16,    42,   -16,    -2,    -3,   -16,
    -1,    -5,   -16,    -4,   -15,   -16,   -16,   -16,   -10,   -16,
   -14,   -16,   -16,    -6,   -15,   -15,   -16,   -15,   -16,   -11,
   -13,   -15,   -16,   -16,   -12,   -16,    -8,   -16,    -7,   -15,
   -16,    -9 ]

racc_goto_table = [
    17,     1,    10,     6,    13,    34,    30,   nil,   nil,   nil,
    29,   nil,   nil,    32,    21,   nil,   nil,    35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,    33 ]

racc_goto_check = [
     5,     1,     3,     2,     3,     6,     7,   nil,   nil,   nil,
     5,   nil,   nil,     5,     2,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -1,    -7,   nil,   -14,   -25,   -19 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    11,   nil,    18,    19 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 15, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  2, 17, :_reduce_none,
  1, 17, :_reduce_none,
  4, 18, :_reduce_none,
  7, 18, :_reduce_none,
  6, 18, :_reduce_none,
  9, 18, :_reduce_none,
  1, 19, :_reduce_none,
  3, 19, :_reduce_none,
  4, 20, :_reduce_12,
  3, 20, :_reduce_13,
  1, 21, :_reduce_none,
  0, 21, :_reduce_none ]

racc_reduce_n = 16

racc_shift_n = 42

racc_token_table = {
  false => 0,
  :error => 1,
  :EXP => 2,
  "(" => 3,
  ")" => 4,
  :LEFT => 5,
  :RIGHT => 6,
  :IDENTIFIER => 7,
  ":" => 8,
  ";" => 9,
  "." => 10,
  "|" => 11,
  :S_LITERAL => 12,
  :OP => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EXP",
  "\"(\"",
  "\")\"",
  "LEFT",
  "RIGHT",
  "IDENTIFIER",
  "\":\"",
  "\";\"",
  "\".\"",
  "\"|\"",
  "S_LITERAL",
  "OP",
  "$start",
  "expression",
  "side",
  "expstmts",
  "expstmt",
  "expfig",
  "operators",
  "operator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'higly_racc.y', 26)
  def _reduce_12(val, _values, result)
          if val[1] =~ /\w+/ then
        @term[val[1]] = val[1].upcase
      elsif val[1].size == 1 then
        @term[val[1]] = "\'#{val[1]}\'"
      else
        @term[val[1]] = "OP#{@termno}"
        @termno += 1
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'higly_racc.y', 37)
  def _reduce_13(val, _values, result)
          if val[1] =~ /\w+/ then
        @term[val[1]] = val[1].upcase
      elsif val[1].size == 1 then
        @term[val[1]] = "\'#{val[1]}\'"
      else
        @term[val[1]] = "OP#{@termno}"
        @termno += 1
      end
    
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class HiglyParser


parser = HiglyParser.new
if ARGV[0] then
  File.open(ARGV[0]) do |f|
    parser.parse f
  end
else
  puts "file is nothing. input code."
  parser.parse $stdin
end

if ARGV[1] then
  f = File.open(ARGV[1], "w")
else
  f = File.open("higly.l", "w")
end
f.puts(parser.make_lex)
f.close
